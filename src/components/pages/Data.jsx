import 'bootstrap/dist/css/bootstrap.min.css';
import Header from '../shared/Header';
import { Fragment, useState, useMemo, useEffect } from 'react';
import { Container } from 'react-bootstrap';
import axios from 'axios';

const Data = () => {
    const APIKEY = "https://6046705df0c6dc00177b1e75.mockapi.io/Products";//Mock API with data generated by faker.js
    //get the data
    const [data, setData] = useState([]);
    const products = useMemo(() => data, [data]);
    useEffect(() => {
        axios.get(APIKEY).then(resp => setData(resp.data));
    }, []);

    //combined filter and sort method
    const filterAndSort = () => {
        const filterValue = document.getElementById("filter").value;
        const sortField = document.getElementById("sortDropdown").value;
        let regex = RegExp(filterValue.toLowerCase());

        console.log("Filtering for " + filterValue);
        console.log("sorting by " + sortField);

        axios.get(APIKEY).then(resp => {
            switch (sortField) {
                default:
                case "nameAsc":
                    setData([...resp.data.filter(datum => regex.test(datum.ProductName.toLowerCase())).sort(function (a, b) {
                        let aName = a.ProductName.toLowerCase();
                        let bName = b.ProductName.toLowerCase();
                        if (aName > bName) return 1;
                        if (aName < bName) return -1;
                        return 0;
                    })]);
                    break;
                case "nameDsc":
                    setData([...resp.data.filter(datum => regex.test(datum.ProductName.toLowerCase())).sort(function (a, b) {
                        let aName = a.ProductName.toLowerCase();
                        let bName = b.ProductName.toLowerCase();
                        if (aName > bName) return 1;
                        if (aName < bName) return -1;
                        return 0;
                    }).reverse()]);
                    break;
                case "priceAsc":
                    setData([...resp.data.filter(datum => regex.test(datum.ProductName.toLowerCase())).sort(function (a, b) {
                        return a.ProductPrice - b.ProductPrice;
                    })]);
                    break;
                case "priceDsc":
                    setData([...resp.data.filter(datum => regex.test(datum.ProductName.toLowerCase())).sort(function (a, b) {
                        return a.ProductPrice - b.ProductPrice;
                    }).reverse()]);
                    break;
                case "purchaseAsc":
                    setData([...resp.data.filter(datum => regex.test(datum.ProductName.toLowerCase())).sort(function (a, b) {
                        return a.PurchaseCount - b.PurchaseCount;
                    })]);
                    break;
                case "purchaseDsc":
                    setData([...resp.data.filter(datum => regex.test(datum.ProductName.toLowerCase())).sort(function (a, b) {
                        return a.PurchaseCount - b.PurchaseCount;
                    }).reverse()]);
                    break;
            }
        });
    }

    return (
        <Fragment>
            <Header title="Products" />
            <Container>
                <div className="row my-3 align-items-center justify-content-beginning">
                    <div className="col-auto">
                        <label htmlFor="filter" className="col-form-label">Filter:</label>
                    </div>

                    <div className="col-auto">
                        <input type="text" name="filter" id="filter" className="form-control" onKeyPress={key => { if (key.code === "Enter") filterAndSort() }} />{/*I couldn't use onChange because my API was giving error 429 when it recieves too many requests, i.e. a new request for every letter*/}
                    </div>
                </div>
                <div className="row my-3 align-items-center justify-content-beginning">
                    <div className="col-auto">
                        <label htmlFor="sortDropdown" className="col-form-label">Sort by</label>
                    </div>
                    <div className="col-auto">
                        <select name="sortDropdown" id="sortDropdown" onChange={filterAndSort}>
                            <option value="nameAsc">Name Ascending</option>
                            <option value="nameDsc">Name Descending</option>
                            <option value="priceAsc">Price Ascending</option>
                            <option value="priceDsc">Price Descending</option>
                            <option value="purchaseAsc">Purchase Count Ascending</option>
                            <option value="purchaseDsc">Purchase Count Descending</option>
                        </select>
                    </div>
                </div>
                <table className="table">
                    <thead><tr>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Purchase Count</th>
                    </tr></thead>
                    <tbody>
                        {products.map((product, i) => (
                            <tr key={i}>
                                <td>
                                    {product.ProductName}
                                </td>
                                <td>
                                    {product.ProductPrice}
                                </td>
                                <td>
                                    {product.PurchaseCount}
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </Container>
        </Fragment>
    )

}

export default Data;